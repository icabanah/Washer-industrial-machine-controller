// ui_controller.cpp
#include "ui_controller.h"
#include "program_controller.h"
#include "storage.h"
#include "Arduino.h"
#include <stdio.h>

// Definici√≥n de la instancia global
UIControllerClass UIController;

// Definici√≥n de variables para almacenar datos de programa
// Estas variables simulan los datos que vendr√≠an de Program Controller
uint8_t NivelAgua[3][4] = {
  {2, 3, 4, 1},  // Programa 1
  {3, 2, 4, 2},  // Programa 2
  {4, 3, 2, 1}   // Programa 3
};

uint8_t RotacionTam[3][4] = {
  {1, 2, 1, 3},  // Programa 1
  {2, 1, 3, 2},  // Programa 2
  {3, 2, 1, 2}   // Programa 3
};

uint8_t TemperaturaLim[3][4] = {
  {30, 40, 50, 40},  // Programa 1
  {35, 45, 55, 45},  // Programa 2
  {40, 50, 60, 50}   // Programa 3
};

uint8_t TemporizadorLim[3][4] = {
  {5, 10, 15, 5},   // Programa 1
  {10, 15, 20, 10}, // Programa 2
  {15, 20, 25, 15}  // Programa 3
};

void UIControllerClass::init() {
  // Obtener referencia a los datos de programa
  _nivelAgua = NivelAgua;
  _rotacionTam = RotacionTam;
  _temperaturaLim = TemperaturaLim;
  _temporizadorLim = TemporizadorLim;
  
  _userActionPending = false;
  _messageActive = false;
  
  // Inicializar variables para limpieza de eventos
  _clearingEvents = false;
  _clearingStartTime = 0;
  
  // === INICIALIZAR VARIABLES DE EDICI√ìN ===
  _programaEnEdicion = 0;
  _faseEnEdicion = 0;
  _parametroActual = PARAM_NIVEL;
  _modoEdicionActivo = false;
  _editTimeoutStart = 0;
  
  // Inicializar valores temporales
  for (int i = 0; i < 4; i++) {
    _valoresTemporales[i] = 0;
  }
  
  Serial.println("UIControllerClass::init| UI Controller inicializado con sistema de limpieza de eventos");
}

/// @brief 
/// Muestra la pantalla de bienvenida.
/// Esta pantalla se muestra al iniciar el sistema y presenta informaci√≥n b√°sica sobre el controlador.
void UIControllerClass::showWelcomeScreen() {
  // Cambiar a la p√°gina de bienvenida
  Hardware.nextionSetPage(NEXTION_PAGE_WELCOME);
  delay(100); // Pausa breve para asegurar cambio de p√°gina
  
  // Establecer textos de bienvenida usando los componentes correctos de la documentaci√≥n
  // Serial.println("Enviando comando para t√≠tulo...");
  Hardware.nextionSetText(NEXTION_COMP_TITULO, "iTrebolsoft");
  
  // Serial.println("Enviando comando para subt√≠tulo...");  
  Hardware.nextionSetText(NEXTION_COMP_SUBTITULO, "Controlador de Lavadora Industrial");
  
  // Serial.println("Enviando comando para contacto...");
  Hardware.nextionSetText(NEXTION_COMP_CONTACTO, "958970967");
  
  // Activar animaci√≥n de inicio si existe (ejemplo)
  // Hardware.nextionSendCommand("anim.en=1");
  
}

/// @brief 
/// Muestra la pantalla de selecci√≥n de programa.
/// Esta pantalla permite al usuario seleccionar entre los programas disponibles.
/// @note
/// Aseg√∫rate de que los componentes de la pantalla Nextion est√©n correctamente configurados con los IDs especificados.
/// @warning
/// Este m√©todo asume que los programas est√°n numerados del 0 al 2.
/// Si se intenta seleccionar un programa fuera de este rango, no se realizar√° ninguna acci√≥n.
/// @param programa 
/// El n√∫mero del programa a mostrar (0, 1 o 2).
/// Si se pasa 0, se mostrar√° la pantalla de selecci√≥n sin resaltar ning√∫n programa.
void UIControllerClass::showSelectionScreen(uint8_t programa) {
  Utils.debug("Programa seleccionado: " + String(programa + 22));

  // Cambiar a la p√°gina de selecci√≥n
  Hardware.nextionSetPage(NEXTION_PAGE_SELECTION);
  
  // Actualizar informaci√≥n del programa seleccionado
  _updateProgramInfo(programa);
  
  // Resaltar el bot√≥n del programa seleccionado
  Hardware.nextionSetValue(NEXTION_COMP_BTN_PROGRAM1, (programa == 0) ? 1 : 0);
  Hardware.nextionSetValue(NEXTION_COMP_BTN_PROGRAM2, (programa == 1) ? 1 : 0);
  Hardware.nextionSetValue(NEXTION_COMP_BTN_PROGRAM3, (programa == 2) ? 1 : 0);

}

/// @brief
/// Muestra la pantalla de ejecuci√≥n del programa.
/// Esta pantalla muestra el estado actual del programa en ejecuci√≥n, incluyendo fase, tiempo, nivel de agua, temperatura y rotaci√≥n.
/// @details
/// La pantalla de ejecuci√≥n se actualiza con los valores actuales del programa y muestra un temporizador que
/// indica el tiempo transcurrido en la fase actual.
/// Tambi√©n se actualizan los indicadores de nivel de agua, temperatura y rotaci√≥n.
/// @param programa
/// El n√∫mero del programa en ejecuci√≥n (0, 1 o 2).
/// @param fase
/// La fase actual del programa (0 a 3).
/// @param nivelAgua
/// El nivel de agua actual (0 a 4).
/// @param temperatura
/// La temperatura actual en grados Celsius (0 a 100).
/// @param rotacion
/// La rotaci√≥n actual del tambor en RPM (0 a 300).
void UIControllerClass::showExecutionScreen(uint8_t programa, uint8_t fase, uint8_t nivelAgua, uint8_t temperatura, uint8_t rotacion) {
  // Cambiar a la p√°gina de ejecuci√≥n
  Hardware.nextionSetPage(NEXTION_PAGE_EXECUTION);
  
  // Mostrar informaci√≥n del programa usando los componentes correctos de la documentaci√≥n
  Hardware.nextionSetText(NEXTION_COMP_PROG_EJECUCION, "P" + String(programa + 22));
  
  // Establecer valores iniciales
  Hardware.nextionSetText(NEXTION_COMP_FASE_EJECUCION, "Fase: " + String(fase));
  Hardware.nextionSetText(NEXTION_COMP_TIEMPO_EJECUCION, "00:00");  // Tiempo inicial
  
  // Actualizar indicadores usando los componentes existentes que funcionan correctamente
  updateWaterLevel(nivelAgua);
  updateTemperature(temperatura);
  updateRotation(rotacion);
  
  // Inicializar barra de progreso
  updateProgressBar(0);
  
  Serial.println("Mostrando pantalla de ejecuci√≥n de programa");
}

/// @brief
/// Muestra la pantalla de edici√≥n del programa.
/// Esta pantalla permite al usuario editar los par√°metros del programa seleccionado.
/// @param programa
/// El n√∫mero del programa a editar (0, 1 o 2).
/// @param fase
/// La fase del programa a editar (0 a 3).
/// @note
/// Aseg√∫rate de que los componentes de la pantalla Nextion est√©n correctamente configurados con los IDs especificados.
void UIControllerClass::showEditScreen(uint8_t programa, uint8_t fase) {
  // Inicializar modo de edici√≥n
  initEditMode(programa, fase);
  
  // Cambiar a la p√°gina de edici√≥n
  Hardware.nextionSetPage(NEXTION_PAGE_EDIT);
  
  // Actualizar toda la pantalla con los valores iniciales
  updateEditDisplay();
  
  // Ejecutar diagn√≥stico del estado de edici√≥n
  // diagnosticarEstadoEdicion();
  
  // Serial.println("üñ•Ô∏è Pantalla de edici√≥n actualizada:");
  Serial.println("   Programa: " + String(programa + 22));
  Serial.println("   Fase: " + String(fase));
  // Serial.println("üîß startEditing() completado, estado actual: " + String(_modoEdicionActivo ? 1 : 0));
}

void UIControllerClass::showErrorScreen(uint8_t errorCode, const String& errorMessage) {
  // Cambiar a la p√°gina de error
  Hardware.nextionSetPage(NEXTION_PAGE_ERROR);
  
  // Mostrar c√≥digo de error
  Hardware.nextionSetText("txtCodigo", "ERROR " + String(errorCode));
  
  // Mostrar mensaje de error si se proporciona
  if (errorMessage.length() > 0) {
    Hardware.nextionSetText("txtMensaje", errorMessage);
  } else {
    // Mensaje por defecto basado en c√≥digo
    switch (errorCode) {
      case 400: Hardware.nextionSetText("txtMensaje", "Error de sistema"); break;
      case 401: Hardware.nextionSetText("txtMensaje", "Error de temperatura"); break;
      case 402: Hardware.nextionSetText("txtMensaje", "Error de presi√≥n"); break;
      default: Hardware.nextionSetText("txtMensaje", "Error desconocido"); break;
    }
  }
  
  // Activar indicador de alerta
  Hardware.nextionSendCommand("alerta.en=1");
  
  Serial.println("Mostrando pantalla de error");
}

void UIControllerClass::showEmergencyScreen() {
  // Cambiar a la p√°gina de emergencia
  Hardware.nextionSetPage(NEXTION_PAGE_EMERGENCY);
  
  // Mostrar mensaje de emergencia
  Hardware.nextionSetText("txtEmergencia", "PARADA DE EMERGENCIA");
  Hardware.nextionSetText("txtMensajeEmerg", "Sistema detenido por seguridad");
  
  // Activar indicador visual de emergencia
  Hardware.nextionSendCommand("alarm.en=1");
  
  // Reproducir sonido de alarma
  playSound(2);  // C√≥digo 2 para sonido de alarma
  
  Serial.println("EMERGENCIA: Sistema detenido");
}

void UIControllerClass::updateTime(uint8_t minutos, uint8_t segundos) {
  char timeBuffer[6];
  _formatTimeDisplay(minutos, segundos, timeBuffer);
  Hardware.nextionSetText(NEXTION_COMP_TIEMPO_EJECUCION, timeBuffer);
  
  // Actualizar barra de progreso si es necesario
  // (suponiendo fase de 60 minutos m√°ximo)
  uint8_t progress = (minutos * 60 + segundos) / 36;  // 0-100%
  updateProgressBar(progress);
}

void UIControllerClass::_formatTimeDisplay(uint8_t minutos, uint8_t segundos, char* buffer) {
  sprintf(buffer, "%02d:%02d", minutos, segundos);
}

void UIControllerClass::updateTemperature(uint8_t temperatura) {
  // Actualizar texto de temperatura
  Hardware.nextionSetText(NEXTION_COMP_VAL_TEMP, String(temperatura) + "¬∞C");
  
  // Actualizar medidor visual si existe
  Hardware.nextionSetValue(NEXTION_COMP_GAUGE_TEMP_EJECUCION, temperatura);
}

void UIControllerClass::updateWaterLevel(uint8_t nivel) {
  // Actualizar texto de nivel
  Hardware.nextionSetText(NEXTION_COMP_VAL_NIVEL, "Nivel: " + String(nivel));
  
  // Actualizar indicador visual
  Hardware.nextionSetValue(NEXTION_COMP_VAL_ROTACION, nivel * 25);  // 0-100%
}

void UIControllerClass::updateRotation(uint8_t rotacion) {
  // Actualizar texto de rotaci√≥n
  Hardware.nextionSetText("txtRotacion", "Vel: " + String(rotacion));
  
  // Actualizar indicador visual si existe
  Hardware.nextionSendCommand("motor.val=" + String(rotacion));
}

void UIControllerClass::updatePhase(uint8_t fase) {
  Hardware.nextionSetText(NEXTION_COMP_FASE_EJECUCION, "Fase: " + String(fase));
}

void UIControllerClass::updateProgressBar(uint8_t progress) {
  // Actualizar barra de progreso usando el componente correcto de la documentaci√≥n
  Hardware.nextionSendCommand(String(NEXTION_COMP_BARRA_PROGRESO) + ".val=" + String(progress));
}

void UIControllerClass::processEvents() {
  // Verificar si estamos en proceso de limpieza de eventos
  if (_clearingEvents) {
    // Durante la limpieza, descartar todos los eventos sin procesarlos
    while (Hardware.nextionCheckForEvents()) {
      // Los eventos se procesan y descartan autom√°ticamente en Hardware
    }
    
    // Verificar si la limpieza ha terminado
    _isEventClearingComplete();
    return; // No procesar eventos normales durante la limpieza
  }
  
  // === VERIFICAR TIMEOUT DE EDICI√ìN ===
  if (_modoEdicionActivo) {
    _checkEditTimeout();
  }
  
  // Verificar si hay eventos de la pantalla Nextion
  if (Hardware.nextionCheckForEvents()) {
    // Procesar eventos t√°ctiles directamente
    _handleTouchEvent();
  }
  
  // Actualizar mensajes temporales
  if (_messageActive && (millis() - _messageTimestamp > _messageDuration)) {
    _messageActive = false;
    // Limpiar mensaje
    Hardware.nextionSetText(NEXTION_COMP_MSG_TEXT, "");
  }
}

// void UIControllerClass::_handleNextionEvent(const String& event) {
//   // IMPORTANTE: Este m√©todo ya no se usa con String events
//   // Los eventos t√°ctiles ahora se procesan directamente desde Hardware
//   Serial.println("‚ö†Ô∏è ADVERTENCIA: _handleNextionEvent(String) est√° obsoleto");
//   Serial.println("   Use _handleTouchEvent() en su lugar");
// }

/**
 * @brief Procesar eventos t√°ctiles directamente desde Hardware
 */
void UIControllerClass::_handleTouchEvent() {
  // Verificar si hay un evento t√°ctil v√°lido
  if (!Hardware.hasValidTouchEvent()) {
    return;
  }
  
  // Obtener datos del evento t√°ctil
  uint8_t pageId = Hardware.getTouchEventPage();
  uint8_t componentId = Hardware.getTouchEventComponent();
  uint8_t eventType = Hardware.getTouchEventType();
  
  Serial.print("üîç Evento t√°ctil detectado: P√°gina=");
  Serial.print(pageId);
  Serial.print(" ComponentID=");
  Serial.print(componentId);
  Serial.print(" Tipo=");
  Serial.println(eventType);
  
  // Solo procesar eventos de presionado (tipo 1)
  if (eventType != 1) {
    Serial.println("   Evento ignorado (no es presionado)");
    return;
  }
  
  // Procesar seg√∫n la p√°gina
  switch (pageId) {
    case NEXTION_PAGE_SELECTION:
      _handleSelectionPageEvent(componentId);
      break;
      
    case NEXTION_PAGE_EXECUTION:
      _handleExecutionPageEvent(componentId);
      break;
      
    case NEXTION_PAGE_EDIT:
      Serial.println("üéØ Evento en p√°gina de edici√≥n detectado - ComponentID: " + String(componentId));
      handleEditPageEvent(componentId);
      break;
      
    default:
      Serial.println("‚ö†Ô∏è P√°gina no reconocida: " + String(pageId));
      break;
  }
}

/**
 * @brief Manejar eventos de la p√°gina de selecci√≥n
 */
void UIControllerClass::_handleSelectionPageEvent(uint8_t componentId) {
  Serial.println("üìã Procesando evento de p√°gina de selecci√≥n - ComponentID: " + String(componentId));
  
  if (componentId == NEXTION_ID_BTN_PROGRAM1) {
    _lastUserAction = "PROGRAM_1";
    _userActionPending = true;
    Serial.println("   ‚úÖ Programa 1 seleccionado");
  } else if (componentId == NEXTION_ID_BTN_PROGRAM2) {
    _lastUserAction = "PROGRAM_2";
    _userActionPending = true;
    Serial.println("   ‚úÖ Programa 2 seleccionado");
  } else if (componentId == NEXTION_ID_BTN_PROGRAM3) {
    _lastUserAction = "PROGRAM_3";
    _userActionPending = true;
    Serial.println("   ‚úÖ Programa 3 seleccionado");
  } else if (componentId == NEXTION_ID_BTN_START) {
    _lastUserAction = "START";
    _userActionPending = true;
    Serial.println("   ‚úÖ Bot√≥n START presionado");
  } else if (componentId == NEXTION_ID_BTN_EDIT) {
    _lastUserAction = "EDIT";
    _userActionPending = true;
    Serial.println("   ‚úÖ Bot√≥n EDIT presionado");
  } else {
    Serial.println("   ‚ùì ComponentID no reconocido: " + String(componentId));
  }
}

/**
 * @brief Manejar eventos de la p√°gina de ejecuci√≥n
 */
void UIControllerClass::_handleExecutionPageEvent(uint8_t componentId) {
  Serial.println("‚ñ∂Ô∏è Procesando evento de p√°gina de ejecuci√≥n - ComponentID: " + String(componentId));
  
  if (componentId == NEXTION_ID_BTN_PARAR) {
    _lastUserAction = "STOP";
    _userActionPending = true;
    Serial.println("   ‚úÖ Bot√≥n STOP presionado");
  } else if (componentId == NEXTION_ID_BTN_PAUSAR) {
    _lastUserAction = "PAUSE";
    _userActionPending = true;
    Serial.println("   ‚úÖ Bot√≥n PAUSE presionado");
  } else {
    Serial.println("   ‚ùì ComponentID no reconocido: " + String(componentId));
  }
}

/// Este m√©todo actualiza los componentes de la pantalla Nextion con los valores del programa seleccionado.
/// @details
/// Este m√©todo toma el n√∫mero del programa (0, 1 o 2) y actualiza los componentes de la pantalla Nextion
/// con los valores correspondientes de nivel de agua, temperatura, tiempo y rotaci√≥n.
/// Tambi√©n maneja la visualizaci√≥n de informaci√≥n adicional para el programa P24 que tiene m√∫ltiples fases.
/// @param programa 
/// El n√∫mero del programa a mostrar (0, 1 o 2).
/// Si se pasa un n√∫mero fuera de este rango, no se realizar√° ninguna acci√≥n.
void UIControllerClass::_updateProgramInfo(uint8_t programa) {
  // Actualizar informaci√≥n mostrada para el programa seleccionado
  Hardware.nextionSetText(NEXTION_COMP_PROGRAMA_SEL, "P" + String(programa + 22));
  
  // Cargar valores actualizados desde Storage para la primera fase (fase 0)
  uint8_t nivel = Storage.loadWaterLevel(programa, 0);
  uint8_t temp = Storage.loadTemperature(programa, 0);
  uint8_t tiempo = Storage.loadTime(programa, 0);
  uint8_t rotacion = Storage.loadRotation(programa, 0);
  
  // Mostrar valores actualizados
  Hardware.nextionSetText(NEXTION_COMP_VAL_NIVEL, String(nivel));
  Hardware.nextionSetText(NEXTION_COMP_VAL_TEMP, String(temp) + "¬∞C");
  Hardware.nextionSetText(NEXTION_COMP_VAL_TIEMPO, String(tiempo) + " min");
  
  // Convertir valor num√©rico de rotaci√≥n a texto descriptivo
  String rotacionTexto;
  switch (rotacion) {
    case 1: rotacionTexto = "Lento"; break;
    case 2: rotacionTexto = "Medio"; break;
    case 3: rotacionTexto = "R√°pido"; break;
    default: rotacionTexto = "Desconocido"; break;
  }
  Hardware.nextionSetText(NEXTION_COMP_VAL_ROTACION, rotacionTexto);
  
  // Si es el programa 3 (P24), mostrar informaci√≥n adicional de m√∫ltiples fases
  if (programa == 3) {
    // Mostrar informaci√≥n de todas las fases
    String fasesInfo = "Fases: ";
    for (uint8_t i = 0; i < 4; i++) {
      uint8_t tiempoFase = Storage.loadTime(programa, i);
      fasesInfo += String(i + 1) + ":" + String(tiempoFase) + "m ";
    }
    Hardware.nextionSetText(NEXTION_COMP_INFO_FASES, fasesInfo);
  } else {
    Hardware.nextionSetText(NEXTION_COMP_INFO_FASES, "");  // Limpiar texto si no es programa 3
  }
  
  Serial.println("Informaci√≥n del programa P" + String(programa + 22) + " actualizada desde Storage");
}

bool UIControllerClass::hasUserAction() {
  return _userActionPending;
}

String UIControllerClass::getUserAction() {
  _userActionPending = false;
  return _lastUserAction;
}

bool UIControllerClass::isUIStable() {
  // La UI es estable cuando no est√° limpiando eventos y no hay mensajes activos cr√≠ticos
  return !_clearingEvents && _isEventClearingComplete();
}

/// @brief 
/// Muestra un mensaje temporal en la pantalla.
/// Este m√©todo muestra un mensaje en la pantalla Nextion que desaparece despu√©s de un tiempo.
/// @param message 
/// El mensaje a mostrar. Si el mensaje es vac√≠o, no se mostrar√° nada.
/// @param duration 
/// La duraci√≥n en milisegundos que el mensaje permanecer√° visible. Por defecto es 2000 ms (2 segundos).
/// Si se pasa 0, el mensaje permanecer√° visible hasta que se oculte manualmente.
void UIControllerClass::showMessage(const String& message, uint16_t duration) {
  // Mostrar un mensaje temporal en la pantalla
  Hardware.nextionSetText(NEXTION_COMP_MSG_TEXT, message);
  
  _messageActive = true;
  _messageTimestamp = millis();
  _messageDuration = duration;
}

void UIControllerClass::playSound(uint8_t soundType) {
  // Reproducir un sonido en la pantalla Nextion
  // Los tipos pueden ser:
  // 0: normal, 1: advertencia, 2: alarma
  Hardware.nextionSendCommand("audio.val=" + String(soundType));
}


void UIControllerClass::clearPendingEvents() {
  // Limpiar eventos locales pendientes
  _userActionPending = false;
  _lastUserAction = "";
  
  // Procesar y descartar eventos pendientes en el hardware
  while (Hardware.nextionCheckForEvents()) {
    Hardware.nextionGetLastEvent(); // Descartar evento
  }
  
  Serial.println("Eventos de UI limpiados");
}

void UIControllerClass::_clearPendingEvents() {
  // M√©todo interno para iniciar proceso de limpieza
  _clearingEvents = true;
  _clearingStartTime = millis();
  
  // No cambiar de p√°gina durante la limpieza - mantener la p√°gina actual
  // Hardware.nextionSetPage(NEXTION_PAGE_WELCOME);  // ELIMINADO - causaba problemas
  
  // Limpiar eventos locales
  clearPendingEvents();
  
  Serial.println("Iniciando limpieza profunda de eventos...");
}

bool UIControllerClass::_isEventClearingComplete() {
  // Verificar si el proceso de limpieza ha terminado
  if (!_clearingEvents) {
    return true; // No estamos limpiando
  }
  
  // Verificar timeout
  if (millis() - _clearingStartTime >= EVENT_CLEAR_TIMEOUT) {
    _clearingEvents = false;
    Serial.println("Limpieza de eventos completada");
    return true;
  }
  
  return false;
}

// ===== M√âTODOS DE TRANSICI√ìN SEGURA =====

void UIControllerClass::safeTransitionToSelection(uint8_t programa) {
  // Iniciar limpieza de eventos
  _clearPendingEvents();
  
  // Procesar eventos durante el per√≠odo de limpieza
  unsigned long startTime = millis();
  while (millis() - startTime < EVENT_CLEAR_TIMEOUT) {
    if (Hardware.nextionCheckForEvents()) {
      Hardware.nextionGetLastEvent(); // Descartar evento
    }
    delay(1); // Breve pausa para permitir que lleguen eventos
  }
  
  // Ahora mostrar la pantalla objetivo con eventos limpios
  showSelectionScreen(programa);
  
  Serial.println("Transici√≥n segura a pantalla de selecci√≥n completada");
}

void UIControllerClass::safeTransitionToExecution(uint8_t programa, uint8_t fase, uint8_t nivelAgua, uint8_t temperatura, uint8_t rotacion) {
  // Iniciar limpieza de eventos
  _clearPendingEvents();
  
  // Procesar eventos durante el per√≠odo de limpieza
  unsigned long startTime = millis();
  while (millis() - startTime < EVENT_CLEAR_TIMEOUT) {
    if (Hardware.nextionCheckForEvents()) {
      Hardware.nextionGetLastEvent(); // Descartar evento
    }
    delay(1); // Breve pausa para permitir que lleguen eventos
  }
  
  // Ahora mostrar la pantalla objetivo con eventos limpios
  showExecutionScreen(programa, fase, nivelAgua, temperatura, rotacion);
  
  Serial.println("Transici√≥n segura a pantalla de ejecuci√≥n completada");
}

void UIControllerClass::safeTransitionToEdit(uint8_t programa, uint8_t fase) {
  // Iniciar limpieza de eventos
  _clearPendingEvents();
  
  // Procesar eventos durante el per√≠odo de limpieza
  unsigned long startTime = millis();
  while (millis() - startTime < EVENT_CLEAR_TIMEOUT) {
    if (Hardware.nextionCheckForEvents()) {
      Hardware.nextionGetLastEvent(); // Descartar evento
    }
    delay(1); // Breve pausa para permitir que lleguen eventos
  }
  
  // Ahora mostrar la pantalla objetivo con eventos limpios
  showEditScreen(programa, fase);
  
  Serial.println("Transici√≥n segura a pantalla de edici√≥n completada");
}

void UIControllerClass::safeTransitionToError(uint8_t errorCode, const String& errorMessage) {
  // Para errores, la limpieza debe ser inmediata y prioritaria
  _clearPendingEvents();
  
  // Breve limpieza de eventos cr√≠ticos
  unsigned long startTime = millis();
  while (millis() - startTime < 50) { // Timeout m√°s corto para errores
    if (Hardware.nextionCheckForEvents()) {
      Hardware.nextionGetLastEvent(); // Descartar evento
    }
    delay(1);
  }
  
  // Mostrar pantalla de error inmediatamente
  showErrorScreen(errorCode, errorMessage);
  
  Serial.println("Transici√≥n segura a pantalla de error completada");
}

/**
 * @brief Inicializar el modo de edici√≥n con los par√°metros del programa y fase especificados
 * @param programa N√∫mero de programa (0, 1, 2)
 * @param fase N√∫mero de fase (0-3)
 */
void UIControllerClass::initEditMode(uint8_t programa, uint8_t fase) {
  _programaEnEdicion = programa;
  _faseEnEdicion = fase;
  _parametroActual = PARAM_NIVEL; // Comenzar con el primer par√°metro
  _modoEdicionActivo = true;
  _resetEditTimeout();
  
  // Cargar valores actuales desde storage
  _loadParametersFromStorage(programa, fase);
  
  Serial.println("Modo edici√≥n inicializado - P" + String(programa + 22) + " F" + String(fase));
}


/// @brief 
/// Cargar los valores de los par√°metros del programa y fase especificados desde Storage
void UIControllerClass::updateEditDisplay() {
  if (!_modoEdicionActivo) return;
  
  char buffer[20];
  
  // Actualizar programa y fase en edici√≥n
  generarTextoPrograma(_programaEnEdicion, buffer, sizeof(buffer));
  Hardware.nextionSetText(NEXTION_COMP_PROG_EDICION, buffer);
  
  snprintf(buffer, sizeof(buffer), "F%d", _faseEnEdicion); // Actualizar fase en edici√≥n
  Hardware.nextionSetText(NEXTION_COMP_FASE_EDICION, buffer);
  
  // Actualizar par√°metro actual y panel derecho
  updateParameterDisplay();
  updateRightPanel();
  
  Serial.println("Pantalla de edici√≥n actualizada");
}


/// @brief 
/// Cargar los par√°metros del programa y fase especificados desde Storage
void UIControllerClass::updateParameterDisplay() {
  if (!_modoEdicionActivo) return;
  
  char buffer[20];
  
  // Actualizar nombre del par√°metro actual
  const char* textoParam = obtenerTextoParametro(_parametroActual);
  Hardware.nextionSetText(NEXTION_COMP_PARAM_EDITAR, textoParam);
  
  // Actualizar valor del par√°metro actual con formato
  formatearParametroConUnidad(_parametroActual, _valoresTemporales[_parametroActual], buffer, sizeof(buffer));
  Hardware.nextionSetText(NEXTION_COMP_PARAM_VALOR_EDITAR, buffer);
  
  Serial.println("Par√°metro actual actualizado: " + String(textoParam) + " = " + String(buffer));
}


/// @brief 
/// Cargar los valores de los par√°metros del programa y fase especificados desde Storage
void UIControllerClass::updateRightPanel() {
  if (!_modoEdicionActivo) return;
  
  char buffer[20];
  
  // Actualizar nivel en panel derecho
  snprintf(buffer, sizeof(buffer), "%d", _valoresTemporales[PARAM_NIVEL]);
  Hardware.nextionSetText(NEXTION_COMP_VAL_NIVEL_EDIT, buffer);
  
  // Actualizar temperatura en panel derecho
  snprintf(buffer, sizeof(buffer), "%d¬∞C", _valoresTemporales[PARAM_TEMPERATURA]);
  Hardware.nextionSetText(NEXTION_COMP_VAL_TEMP_EDIT, buffer);
  
  // Actualizar tiempo en panel derecho
  snprintf(buffer, sizeof(buffer), "%d min", _valoresTemporales[PARAM_TIEMPO]);
  Hardware.nextionSetText(NEXTION_COMP_VAL_TIEMPO_EDIT, buffer);
  
  // Actualizar rotaci√≥n en panel derecho
  snprintf(buffer, sizeof(buffer), "Vel %d", _valoresTemporales[PARAM_ROTACION]);
  Hardware.nextionSetText(NEXTION_COMP_VAL_ROTAC_EDIT, buffer);
  
  // Actualizar fase en panel derecho
  snprintf(buffer, sizeof(buffer), "F%d", _faseEnEdicion);
  Hardware.nextionSetText(NEXTION_COMP_VAL_FASE_EDIT, buffer);
  
  Serial.println("Panel derecho actualizado");
}

// ===== MANEJO DE EVENTOS DE EDICI√ìN =====

/**
 * @brief Procesar eventos t√°ctiles de la p√°gina de edici√≥n
 * @param componentId ID del componente que gener√≥ el evento
 */
void UIControllerClass::handleEditPageEvent(int componentId) {
  if (!_modoEdicionActivo) {
    Serial.println("‚ö†Ô∏è Evento de edici√≥n recibido pero modo edici√≥n no est√° activo");
    return;
  }
  
  // Resetear timeout al recibir cualquier evento
  _resetEditTimeout();
  
  switch (componentId) {
    case NEXTION_ID_BTN_PARAM_MAS:
      Serial.println("‚ûï Bot√≥n MAS presionado (ID: " + String(NEXTION_ID_BTN_PARAM_MAS) + ")");
      handleParameterIncrement();
      break;
      
    case NEXTION_ID_BTN_PARAM_MENOS:
      Serial.println("‚ûñ Bot√≥n MENOS presionado (ID: " + String(NEXTION_ID_BTN_PARAM_MENOS) + ")");
      handleParameterDecrement();
      break;
      
    // case NEXTION_ID_BTN_PARAM_SIGUIENTE:
    //   Serial.println("‚è≠Ô∏è Bot√≥n SIGUIENTE presionado (ID: " + String(NEXTION_ID_BTN_PARAM_SIGUIENTE) + ")");
    //   handleNextParameter();
    //   break;
      
    // case NEXTION_ID_BTN_PARAM_ANTERIOR:
    //   Serial.println("‚èÆÔ∏è Bot√≥n ANTERIOR presionado (ID: " + String(NEXTION_ID_BTN_PARAM_ANTERIOR) + ")");
    //   handlePreviousParameter();
    //   break;
      
    case NEXTION_ID_BTN_GUARDAR:
      Serial.println("üíæ Bot√≥n GUARDAR presionado (ID: " + String(NEXTION_ID_BTN_GUARDAR) + ")");
      handleSaveParameters();
      break;
      
    case NEXTION_ID_BTN_CANCELAR:
      Serial.println("‚ùå Bot√≥n CANCELAR presionado (ID: " + String(NEXTION_ID_BTN_CANCELAR) + ")");
      handleCancelEdit();
      break;
      
    default:
      Serial.println("‚ùì Evento de edici√≥n no reconocido: ComponentID=" + String(componentId));
      // Serial.println("   IDs esperados:");
      // Serial.println("   - MAS: " + String(NEXTION_ID_BTN_PARAM_MAS));
      // Serial.println("   - MENOS: " + String(NEXTION_ID_BTN_PARAM_MENOS));
      // Serial.println("   - SIGUIENTE: " + String(NEXTION_ID_BTN_PARAM_SIGUIENTE));
      // Serial.println("   - ANTERIOR: " + String(NEXTION_ID_BTN_PARAM_ANTERIOR));
      // Serial.println("   - GUARDAR: " + String(NEXTION_ID_BTN_GUARDAR));
      // Serial.println("   - CANCELAR: " + String(NEXTION_ID_BTN_CANCELAR));
      break;
  }
}
/**
 * @brief Manejar evento del bot√≥n "+" (incrementar par√°metro)
 */
void UIControllerClass::handleParameterIncrement() {
  Serial.println("üîß handleParameterIncrement() iniciado");
  
  // Incrementar el valor del par√°metro actual usando las funciones de config.cpp
  int valorAnterior = _valoresTemporales[_parametroActual];
  _valoresTemporales[_parametroActual] = incrementarParametro(_parametroActual, _valoresTemporales[_parametroActual]);
  
  Serial.println("   Par√°metro: " + String(obtenerTextoParametro(_parametroActual)));
  Serial.println("   Valor anterior: " + String(valorAnterior));
  Serial.println("   Valor nuevo: " + String(_valoresTemporales[_parametroActual]));
  
  // Actualizar pantalla
  updateParameterDisplay();
  updateRightPanel();
  
  // Mostrar feedback visual/sonoro
  playSound(0); // Sonido normal
  
  Serial.println("‚úÖ Par√°metro incrementado exitosamente");
}

/**
 * @brief Manejar evento del bot√≥n "-" (decrementar par√°metro)
 */
void UIControllerClass::handleParameterDecrement() {
  Serial.println("üîß handleParameterDecrement() iniciado");
  
  // Decrementar el valor del par√°metro actual usando las funciones de config.cpp
  int valorAnterior = _valoresTemporales[_parametroActual];
  _valoresTemporales[_parametroActual] = decrementarParametro(_parametroActual, _valoresTemporales[_parametroActual]);
  
  Serial.println("   Par√°metro: " + String(obtenerTextoParametro(_parametroActual)));
  Serial.println("   Valor anterior: " + String(valorAnterior));
  Serial.println("   Valor nuevo: " + String(_valoresTemporales[_parametroActual]));
  
  // Actualizar pantalla
  updateParameterDisplay();
  updateRightPanel();
  
  // Mostrar feedback visual/sonoro
  playSound(0); // Sonido normal
  
  Serial.println("‚úÖ Par√°metro decrementado exitosamente");
}

/**
 * @brief Manejar evento del bot√≥n "Siguiente" (pasar al siguiente par√°metro)
 */
void UIControllerClass::handleNextParameter() {
  Serial.println("üîß handleNextParameter() iniciado");
  
  // Obtener el siguiente par√°metro en el ciclo usando las funciones de config.cpp
  int parametroAnterior = _parametroActual;
  _parametroActual = obtenerSiguienteParametro(_parametroActual);
  
  Serial.println("   Par√°metro anterior: " + String(obtenerTextoParametro(parametroAnterior)));
  Serial.println("   Par√°metro nuevo: " + String(obtenerTextoParametro(_parametroActual)));
  
  // Actualizar pantalla para mostrar el nuevo par√°metro
  updateParameterDisplay();
  
  // Mostrar feedback visual/sonoro
  playSound(0); // Sonido normal
  
  Serial.println("‚úÖ Cambiado a siguiente par√°metro exitosamente");
}

/**
 * @brief Manejar evento del bot√≥n "Anterior" (pasar al par√°metro anterior)
 */
void UIControllerClass::handlePreviousParameter() {
  Serial.println("üîß handlePreviousParameter() iniciado");
  
  // Obtener el par√°metro anterior en el ciclo usando las funciones de config.cpp
  int parametroAnterior = _parametroActual;
  _parametroActual = obtenerAnteriorParametro(_parametroActual);
  
  Serial.println("   Par√°metro anterior: " + String(obtenerTextoParametro(parametroAnterior)));
  Serial.println("   Par√°metro nuevo: " + String(obtenerTextoParametro(_parametroActual)));
  
  // Actualizar pantalla para mostrar el nuevo par√°metro
  updateParameterDisplay();
  
  // Mostrar feedback visual/sonoro
  // playSound(0); // Sonido normal
  
  Serial.println("‚úÖ Cambiado a par√°metro anterior exitosamente");
}

/**
 * @brief Manejar evento del bot√≥n "Guardar" (guardar todos los cambios)
 */
void UIControllerClass::handleSaveParameters() {
  // Validar todos los par√°metros antes de guardar
  if (!_validateAllParameters()) {
    // Mostrar mensaje de error
    showMessage("Error: Valores no v√°lidos", 3000);
    // playSound(1); // Sonido de advertencia
    return;
  }
  
  // Guardar valores en storage permanente
  _saveParametersToStorage(_programaEnEdicion, _faseEnEdicion);
  
  // Mostrar mensaje de confirmaci√≥n
  showMessage("Par√°metros guardados exitosamente", 2000);
  // playSound(0); // Sonido de confirmaci√≥n
  
  // Salir del modo edici√≥n
  _modoEdicionActivo = false;
  
  // Notificar al ProgramController que vuelva al estado de selecci√≥n
  ProgramController.endEditing();
  
  // Volver a la p√°gina de selecci√≥n
  safeTransitionToSelection(_programaEnEdicion);
  
  Serial.println("Par√°metros guardados exitosamente - P" + String(_programaEnEdicion + 22) + " F" + String(_faseEnEdicion));
}
/**
 * @brief Manejar evento del bot√≥n "Cancelar" (descartar cambios y volver)
 */
void UIControllerClass::handleCancelEdit() {
  // Mostrar mensaje de confirmaci√≥n
  showMessage("Cambios descartados", 1500);
  playSound(0); // Sonido normal
  
  // Salir del modo edici√≥n sin guardar
  _modoEdicionActivo = false;
  
  // Notificar al ProgramController que vuelva al estado de selecci√≥n
  ProgramController.endEditing();
  
  // Volver a la p√°gina de selecci√≥n
  safeTransitionToSelection(_programaEnEdicion);
  _modoEdicionActivo = false;
  
  // Volver a la p√°gina de selecci√≥n
  safeTransitionToSelection(_programaEnEdicion);
  
  Serial.println("Edici√≥n cancelada - Cambios descartados");
}

// ===== M√âTODOS INTERNOS PARA GESTI√ìN DE PAR√ÅMETROS =====


/// @brief 
/// Cargar los par√°metros del programa y fase especificados desde Storage
/// @param programa 
/// N√∫mero de programa (0, 1, 2)
/// @param fase 
/// N√∫mero de fase (0-3)
void UIControllerClass::_loadParametersFromStorage(uint8_t programa, uint8_t fase) {
  // Cargar valores directamente desde Storage
  _valoresTemporales[PARAM_NIVEL] = Storage.loadWaterLevel(programa, fase);
  _valoresTemporales[PARAM_TEMPERATURA] = Storage.loadTemperature(programa, fase);
  _valoresTemporales[PARAM_TIEMPO] = Storage.loadTime(programa, fase);
  _valoresTemporales[PARAM_ROTACION] = Storage.loadRotation(programa, fase);
  
  Serial.println("Par√°metros cargados desde storage - P" + String(programa + 22) + " F" + String(fase) + ":");
  Serial.println("  Nivel: " + String(_valoresTemporales[PARAM_NIVEL]));
  Serial.println("  Temperatura: " + String(_valoresTemporales[PARAM_TEMPERATURA]) + "¬∞C");
  Serial.println("  Tiempo: " + String(_valoresTemporales[PARAM_TIEMPO]) + " min");
  Serial.println("  Rotaci√≥n: " + String(_valoresTemporales[PARAM_ROTACION]));
}


/// @brief 
/// Guardar los par√°metros del programa y fase especificados en Storage
/// @details
/// Este m√©todo guarda los valores temporales de nivel de agua, temperatura, tiempo y rotaci√≥n
/// en el almacenamiento permanente (Storage) para el programa y fase especificados.
/// Tambi√©n actualiza las matrices est√°ticas para mantener la consistencia con los datos guardados.
/// @param programa 
/// N√∫mero de programa (0, 1, 2)
/// @param fase 
/// N√∫mero de fase (0-3)
void UIControllerClass::_saveParametersToStorage(uint8_t programa, uint8_t fase) {
  // Guardar valores directamente en Storage
  Storage.saveWaterLevel(programa, fase, _valoresTemporales[PARAM_NIVEL]);
  Storage.saveTemperature(programa, fase, _valoresTemporales[PARAM_TEMPERATURA]);
  Storage.saveTime(programa, fase, _valoresTemporales[PARAM_TIEMPO]);
  Storage.saveRotation(programa, fase, _valoresTemporales[PARAM_ROTACION]);
  
  // Actualizar matrices est√°ticas tambi√©n para mantener consistencia
  _nivelAgua[programa][fase] = _valoresTemporales[PARAM_NIVEL];
  _temperaturaLim[programa][fase] = _valoresTemporales[PARAM_TEMPERATURA];
  _temporizadorLim[programa][fase] = _valoresTemporales[PARAM_TIEMPO];
  _rotacionTam[programa][fase] = _valoresTemporales[PARAM_ROTACION];
  
  Serial.println("Par√°metros guardados en Storage - P" + String(programa + 22) + " F" + String(fase));
}

/**
 * @brief Validar todos los par√°metros antes de guardar
 * @return true si todos los par√°metros son v√°lidos, false si no
 */
bool UIControllerClass::_validateAllParameters() {
  for (int i = 0; i < 4; i++) {
    if (!esParametroValido(i, _valoresTemporales[i])) {
      Serial.println("Par√°metro inv√°lido: " + String(obtenerTextoParametro(i)) + " = " + String(_valoresTemporales[i]));
      return false;
    }
  }
  return true;
}

/**
 * @brief Verificar timeout de edici√≥n y salir autom√°ticamente si es necesario
 */
void UIControllerClass::_checkEditTimeout() {
  if (_modoEdicionActivo && (millis() - _editTimeoutStart > EDIT_TIMEOUT_MS)) {
    // Timeout alcanzado - salir autom√°ticamente sin guardar
    showMessage("Timeout - Saliendo sin guardar", 2000);
    playSound(1); // Sonido de advertencia
    
    _modoEdicionActivo = false;
    safeTransitionToSelection(_programaEnEdicion);
    
    Serial.println("Timeout de edici√≥n alcanzado - Saliendo autom√°ticamente");
  }
}
// /**
//  * @brief Diagn√≥stico del estado de edici√≥n y mapeo de eventos
//  */
// void UIControllerClass::diagnosticarEstadoEdicion() {
//   // M√©todo deshabilitado para reducir spam en consola
//   Serial.println("   - Par√°metro actual: " + String(obtenerTextoParametro(_parametroActual)));
//   Serial.println("");
  
//   Serial.println("üéØ IDs de botones de edici√≥n esperados:");
//   Serial.println("   - btnMas: " + String(NEXTION_ID_BTN_PARAM_MAS));
//   Serial.println("   - btnMenos: " + String(NEXTION_ID_BTN_PARAM_MENOS));
//   Serial.println("   - btnSiguiente: " + String(NEXTION_ID_BTN_PARAM_SIGUIENTE));
//   Serial.println("   - btnAnterior: " + String(NEXTION_ID_BTN_PARAM_ANTERIOR));
//   Serial.println("   - btnGuardar: " + String(NEXTION_ID_BTN_GUARDAR));
//   Serial.println("   - btnCancelar: " + String(NEXTION_ID_BTN_CANCELAR));
//   Serial.println("");
  
//   Serial.println("üìã Valores temporales actuales:");
//   for (int i = 0; i < 4; i++) {
//     Serial.println("   - " + String(obtenerTextoParametro(i)) + ": " + String(_valoresTemporales[i]));
//   }
//   Serial.println("======================================");
// }

/**
 * @brief Resetear el timeout de edici√≥n
 */
void UIControllerClass::_resetEditTimeout() {
  _editTimeoutStart = millis();
}